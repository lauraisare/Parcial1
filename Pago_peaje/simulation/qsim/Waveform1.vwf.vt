// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/14/2024 16:35:19"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    PagoPeaje
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PagoPeaje_vlg_sample_tst(
	Categoria,
	Pago,
	sampler_tx
);
input [1:0] Categoria;
input  Pago;
output sampler_tx;

reg sample;
time current_time;
always @(Categoria or Pago)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module PagoPeaje_vlg_check_tst (
	SemaforoSalida,
	Tarifa,
	UsuarioPagado,
	sampler_rx
);
input  SemaforoSalida;
input [2:0] Tarifa;
input  UsuarioPagado;
input sampler_rx;

reg  SemaforoSalida_expected;
reg [2:0] Tarifa_expected;
reg  UsuarioPagado_expected;

reg  SemaforoSalida_prev;
reg [2:0] Tarifa_prev;
reg  UsuarioPagado_prev;

reg  SemaforoSalida_expected_prev;
reg [2:0] Tarifa_expected_prev;
reg  UsuarioPagado_expected_prev;

reg  last_SemaforoSalida_exp;
reg [2:0] last_Tarifa_exp;
reg  last_UsuarioPagado_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	SemaforoSalida_prev = SemaforoSalida;
	Tarifa_prev = Tarifa;
	UsuarioPagado_prev = UsuarioPagado;
end

// update expected /o prevs

always @(trigger)
begin
	SemaforoSalida_expected_prev = SemaforoSalida_expected;
	Tarifa_expected_prev = Tarifa_expected;
	UsuarioPagado_expected_prev = UsuarioPagado_expected;
end



// expected SemaforoSalida
initial
begin
	SemaforoSalida_expected = 1'bX;
end 
// expected Tarifa[ 2 ]
initial
begin
	Tarifa_expected[2] = 1'bX;
end 
// expected Tarifa[ 1 ]
initial
begin
	Tarifa_expected[1] = 1'bX;
end 
// expected Tarifa[ 0 ]
initial
begin
	Tarifa_expected[0] = 1'bX;
end 

// expected UsuarioPagado
initial
begin
	UsuarioPagado_expected = 1'bX;
end 
// generate trigger
always @(SemaforoSalida_expected or SemaforoSalida or Tarifa_expected or Tarifa or UsuarioPagado_expected or UsuarioPagado)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected SemaforoSalida = %b | expected Tarifa = %b | expected UsuarioPagado = %b | ",SemaforoSalida_expected_prev,Tarifa_expected_prev,UsuarioPagado_expected_prev);
	$display("| real SemaforoSalida = %b | real Tarifa = %b | real UsuarioPagado = %b | ",SemaforoSalida_prev,Tarifa_prev,UsuarioPagado_prev);
`endif
	if (
		( SemaforoSalida_expected_prev !== 1'bx ) && ( SemaforoSalida_prev !== SemaforoSalida_expected_prev )
		&& ((SemaforoSalida_expected_prev !== last_SemaforoSalida_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SemaforoSalida :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SemaforoSalida_expected_prev);
		$display ("     Real value = %b", SemaforoSalida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SemaforoSalida_exp = SemaforoSalida_expected_prev;
	end
	if (
		( Tarifa_expected_prev[0] !== 1'bx ) && ( Tarifa_prev[0] !== Tarifa_expected_prev[0] )
		&& ((Tarifa_expected_prev[0] !== last_Tarifa_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tarifa[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tarifa_expected_prev);
		$display ("     Real value = %b", Tarifa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Tarifa_exp[0] = Tarifa_expected_prev[0];
	end
	if (
		( Tarifa_expected_prev[1] !== 1'bx ) && ( Tarifa_prev[1] !== Tarifa_expected_prev[1] )
		&& ((Tarifa_expected_prev[1] !== last_Tarifa_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tarifa[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tarifa_expected_prev);
		$display ("     Real value = %b", Tarifa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Tarifa_exp[1] = Tarifa_expected_prev[1];
	end
	if (
		( Tarifa_expected_prev[2] !== 1'bx ) && ( Tarifa_prev[2] !== Tarifa_expected_prev[2] )
		&& ((Tarifa_expected_prev[2] !== last_Tarifa_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tarifa[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tarifa_expected_prev);
		$display ("     Real value = %b", Tarifa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Tarifa_exp[2] = Tarifa_expected_prev[2];
	end
	if (
		( UsuarioPagado_expected_prev !== 1'bx ) && ( UsuarioPagado_prev !== UsuarioPagado_expected_prev )
		&& ((UsuarioPagado_expected_prev !== last_UsuarioPagado_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UsuarioPagado :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UsuarioPagado_expected_prev);
		$display ("     Real value = %b", UsuarioPagado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_UsuarioPagado_exp = UsuarioPagado_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module PagoPeaje_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] Categoria;
reg Pago;
// wires                                               
wire SemaforoSalida;
wire [2:0] Tarifa;
wire UsuarioPagado;

wire sampler;                             

// assign statements (if any)                          
PagoPeaje i1 (
// port map - connection between master ports and signals/registers   
	.Categoria(Categoria),
	.Pago(Pago),
	.SemaforoSalida(SemaforoSalida),
	.Tarifa(Tarifa),
	.UsuarioPagado(UsuarioPagado)
);
// Categoria[ 1 ]
initial
begin
	Categoria[1] = 1'b1;
end 
// Categoria[ 0 ]
initial
begin
	Categoria[0] = 1'b1;
end 

// Pago
initial
begin
	Pago = 1'b1;
end 

PagoPeaje_vlg_sample_tst tb_sample (
	.Categoria(Categoria),
	.Pago(Pago),
	.sampler_tx(sampler)
);

PagoPeaje_vlg_check_tst tb_out(
	.SemaforoSalida(SemaforoSalida),
	.Tarifa(Tarifa),
	.UsuarioPagado(UsuarioPagado),
	.sampler_rx(sampler)
);
endmodule

